import "@typespec/http";

using TypeSpec.Http;

/**
 * This API is designed for the LLMail Inject competition.
 * It facilitates the management of teams, job submissions, and job updates. 
 * 
 * Participants can use this API to create teams, manage team members, submit jobs,
 * and retrieve job status updates during the competition.
 * 
 * The API handles essential competition tasks such as rate limiting, job processing,
 * and secure team management for participants.
 */
@service({
    title: "LLMail Inject"
})
namespace LLMailInject;

/**
 * The format of an error returned by the API.
 */
@error
model Error {
  /**
   * A human-readable message describing the error that occurred.
   */
  @visibility("read")
  message: string;
  /**
   * Advice on how to resolve the error or what to do next.
   */
  @visibility("read")
  advice: string;

  /**
   * A unique trace ID which can be used to report the error to the competition organizers.
   */
  @visibility("read")
  trace_id: string;
}

/**
 * The details of a job submitted by a team for a specific scenario and prompt.
 */
model Job {
  /**
   * The scenario that the job is attempting to solve.
   * 
   * This should correspond to the `scenario_id` of a scenario in the Scenarios API.
   */
  scenario: string;

  /**
   * The subject of the email.
   */
  subject: string;
  
  /**
   * The body of the email.
   */
  body: string;

  /**
   * The ID of the team which submitted the job.
   */
  @visibility("read", "create")
  @path
  team_id: string;

  /**
   * The ID of the job submission.
   */
  @visibility("read")
  @path
  job_id: string;

  /**
   * The time at which the job was submitted.
   */
  @visibility("read")
  scheduled_time: utcDateTime;

  /**
   * The output generated by the job, once it has completed execution.
   * 
   * This field will only be populated once the job has completed execution.
   */
  @visibility("read")
  output?: string;

  /**
   * The status of each of the scenario's objectives, once the job has completed.
   * A successful submission will have all objectives reported as `true`.
   * 
   * This field will only be populated once the job has completed execution.
   */
  @visibility("read")
  objectives?: Record<boolean>;

  /**
   * The time at which the job execution was started on the backend.
   * 
   * This field will only be populated once the job has completed execution.
   */
  @visibility("read")
  started_time?: utcDateTime;

  /**
   * The time at which the job execution was completed on the backend.
   * 
   * This field will only be populated once the job has completed execution.
   */
  @visibility("read")
  completed_time?: utcDateTime;
}

/**
 * The details of a scenario available for competition participants to attempt.
 */
model Scenario {
  /**
   * The ID of the scenario, which is unique across all scenarios.
   */
  @visibility("read", "update")
  @path
  scenario_id: string;

  /**
   * The human readable name of the scenario.
   */
  name: string;

  /**
   * A description of the scenario and the objectives that the attacker must achieve.
   */
  description: string;

  /**
   * The list of objectives that the attacker must achieve to successfully solve the scenario.
   */
  objectives: string[];

  /**
   * Additional metadata describing the scenario, such as the model used, the defences in place, etc.
   */
  metadata: Record<string>;
}

/**
 * The details of a team participating in the competition.
 */
model Team {
    /**
     * The ID of the team, which is unique across all teams.
     */
    @visibility("read", "update")
    @path
    team_id: string;

    /**
     * The human readable name of the team. Must be unique across all teams.
     */
    name: string;

    /**
     * The list of GitHub usernames of the team members.
     */
    members: string[];

    /**
     * The list of scenarios that the team has successfully solved.
     */
    @visibility("read")
    solved_scenarios: string[];

    /**
     * The score of the team, computed based on the number of scenarios solved and the
     * number of other teams that have solved them.
     */
    @visibility("read")
    score: int32;
}

/**
 * A leaderboard which ranks the top performing teams in the competition based
 * on the number, difficulty, and relative ordering of scenarios they have solved
 * in the competition.
 */
model Leaderboard {
    /**
     * The ordered list of team IDs based on their relative scores.
     */
    teams: string[];

    /**
     * The time at which the leaderboard was last updated.
     */
    last_updated: utcDateTime;
}

/**
 * The Jobs API provides a means to manage job submissions for the competition.
 * 
 * Jobs are submitted by teams and represent an attempt to solve a specific
 * scenario and prompt. The job's status is updated as the job is processed,
 * and the results are made available to the team once the job is completed.
 */
@route("/api/teams/{team_id}/jobs")
@useAuth(BearerAuth)
@tag("Jobs")
interface Jobs {
    /**
     * Gets a list of all jobs submitted by a team.
     */
    @get list(@path team_id: string): Job[] | Error;

    /**
     * Gets the details of a specific job submitted by a team.
     */
    @get read(@path team_id: string, @path job_id: string): Job | Error;

    /**
     * Submits a new job for a specific scenario and prompt,
     * attempting to solve the given scenario.
     */
    @post create(...Job): Job | Error;
}

/**
 * The Teams API provides access to the list of teams participating in the competition.
 * 
 * Teams are the primary unit of competition in the LLMail Inject competition, and
 * are composed of one or more participants who work together to solve scenarios.
 * The team's score is computed based on the number of scenarios they have solved,
 * and how many other teams have solved them.
 * 
 * Submission rate limiting is also enforced at the team level.
 */
@route("/api/teams")
@tag("Teams")
interface Teams {
    /**
     * Gets a list of all teams participating in the competition.
     */
    @get list(): Team[] | Error;

    /**
     * Gets the details of a specific team participating in the competition.
     */
    @get @useAuth(BearerAuth) read(@path team_id: string): Team | Error;

    /**
     * Creates a new team for the competition. Must be executed by a user who is
     * not yet a member of a team and requires that the team name is globally unique.
     */
    @post @useAuth(BearerAuth) create(...Team): Team | Error;

    /**
     * Updates the details of a specific team participating in the competition,
     * allowing changes to the list of GitHub users who are members of the team.
     */
    @patch @useAuth(BearerAuth) update(...Team): Team | Error;
}

/**
 * The Scenarios API provides access to the list of scenarios available for the
 * competition participants to attempt.
 * 
 * Each scenario represents a specific configuration of the problem space and
 * may vary on the specific model, meta-prompt, defences, ambient context, and objectives
 * for the attacker.
 */
@route("/api/scenarios")
@tag("Scenarios")
interface Scenarios {
    /**
     * Gets a list of all scenarios available for the competition participants
     * to attempt.
     */
    @get list(): Scenario[] | Error;
}

/**
 * The Leaderboards API provides access to the current leaderboard ranking the
 * top performing teams in the competition.
 * 
 * The leaderboard is computed based on the number, difficulty, and relative ordering
 * of scenarios that the teams have solved in the competition. The leaderboard
 * is updated every 5 minutes to reflect the most recent team rankings.
 */
@route("/api/leaderboard")
@tag("Leaderboards")
interface Leaderboards {
    /**
     * Gets the current leaderboard ranking the top performing teams in the competition.
     */
    @get list(): Leaderboard | Error;
}